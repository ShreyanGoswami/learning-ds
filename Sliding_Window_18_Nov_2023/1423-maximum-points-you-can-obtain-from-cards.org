#+title: 1423 Maximum Points You Can Obtain From Cards

* Classic Sliding Window

#+begin_src go
func maxScore(cardPoints []int, k int) int {
	points := 0

	for _, p := range cardPoints {
		points += p
	}

	score := points
	start, end := len(cardPoints)-1, k-1

	for end >= 0 {
		points += cardPoints[start] - cardPoints[end]
		score = max(score, points)
		end--
		start--
	}

	return score
}
#+end_src

#+begin_src python
def max_score(self, cardPoints: List[int], k: int) -> int:
    score = points = sum(cardPoints[0:k])
    start, end = len(cardPoints)-1, k-1

    while end >= 0:
        points += cardPoints[start] - cardPoints[end]
        score = max(score, points)
        end -= 1
        start -= 1

    return score
#+end_src

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Here, the window rolls *off-screen* towards the left and occupies the last index of the array.

It keeps moving left until ~end~ is at last index of the array and ~start~ is at ~len(cardPoints)-k~.
So ~while end >= 0~ could be replaced with ~while start >= len(cardPoints)-k~.

#+begin_example
cardPoints         : [1, 2, 3, 4, 5, 6, 1], k = 3, len(cardPoints) = 7
sum from 0 to 2    :  _  _  _  o  o  o  o , points =  6, score =  6 <--- sum from 0 to k-1
s = 6, e = 2       :  _  _  o  o  o  o  _ , points =  4, score =  6 <--- while loop starts
s = 5, e = 1       :  _  o  o  o  o  _  _ , points =  8, score =  8
s = 4, e = 0       :  o  o  o  o  _  _  _ , points = 12, score = 12
#+end_example

* Fixed width Sliding Window

This solution is essentially the same as the one above. It takes advantage of the fact that the window size ~k~ always remains the same.

#+begin_src go
func maxScore(cardPoints []int, k int) int {
    subarraySum := 0
    for i := 0; i < k; i++ {
        subarraySum += cardPoints[i]
    }

    maxScore := subarraySum
	outdoors := len(cardPoints)-k

    for i := k-1; i >= 0; i-- {
        subarraySum += cardPoints[outdoors + i] - cardPoints[i]
        maxScore = max(maxScore, subarraySum)
    }

    return maxScore
}
#+end_src

#+begin_src python
class Solution:
    def max_score(self, cardPoints: List[int], k: int) -> int:
        max_score = _sum = sum(cardPoints[:k])
        outdoors = len(cardPoints)-k

        for i in range (k-1, -1, -1):
            _sum += cardPoints[i + outdoors] - cardPoints[i]
            max_score = max(max_score, _sum)

        return max_score
#+end_src

The number ~outdoors~ is the part of the ~cardPoints~ array which is outside the window.

=> ~k~ is the window size.
=> ~k~ + ~outdoors~ = ~len(array)~.
=> ~outdoors~ is ~len(array)-k~.

#+begin_example
cardPoints         : [1, 2, 3, 4, 5, 6, 1], k = 3, outdoors = 7-3 = 4
sum from 0 to 2    :  _  _  _  o  o  o  o , _sum =  6, max =  6
i = 2, i+outdoors=6:  _  _  o  o  o  o  _ , _sum =  4, max =  6
i = 1, i+outdoors=5:  _  o  o  o  o  _  _ , _sum =  8, max =  8
i = 0, i+outdoors=4:  o  o  o  o  _  _  _ , _sum = 12, max = 12
#+end_example

