#+title: 1695 Maximum Erasure Value

#+begin_src go
func maximumUniqueSubarray(nums []int) int {
	var counter [10001]int
    start, end, maxSum, sum := 0, 0, 0, 0

    for end < len(nums) {
        counter[nums[end]]++
        sum += nums[end]

        for counter[nums[end]] > 1 {
            sum -= nums[start]
            counter[nums[start]]--
            start++
        }

        maxSum = max(maxSum, sum)
        end++
    }

    return maxSum
}
#+end_src

#+begin_src python
class Solution:
    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        counter = [0] * 10001
        start, end, max_sum, _sum = 0, 0, 0, 0

        while end < len(nums):
            counter[nums[end]] += 1
            _sum += nums[end]

            while counter[nums[end]] > 1:
                _sum -= nums[start]
                counter[nums[start]] -= 1
                start += 1

            max_sum = max(max_sum, _sum)
            end += 1

        return max_sum
#+end_src

#+begin_example
nums: [4 , 2 , 4 , 5 , 6]
    :  4                    : sum =  4, max_sum =  4
       se
    :  4 , 2                : sum =  6, max_sum =  6
       s   e
    :  4 , 2 , 4            : sum = 10, max_sum = 10
       s       e
    :      2 , 4            : sum =  6, max_sum = 10
           s , e
    :      2 , 4 , 5        : sum = 11, max_sum = 11
           s       e
    :      2 , 4 , 5 , 6    : sum = 17, max_sum = 17
           s           e
#+end_example
