#+title: 2260 Minimum Consecutive Cards To Pick Up

* Classic Sliding Window

#+begin_src go
func minimumCardPickup(cards []int) int {
    var frequency [1e6+1]int
    distance := math.MaxInt
    start, end := 0, 0

    for end < len(cards) {
        frequency[cards[end]]++
        for frequency[cards[end]] > 1 {
            distance = min(distance, end - start + 1)
            frequency[cards[start]]--
            start++
        }
        end++
    }
    if distance == math.MaxInt {
        return -1
    }
    return distance
}
#+end_src

#+begin_src python
class Solution:
    def minimumCardPickup(self, cards: List[int]) -> int:
        frequency = [0] * (10 ** 6 + 1)
        distance = float('inf')
        start, end = 0, 0

        while end < len(cards):
            frequency[cards[end]] += 1

            while frequency[cards[end]] > 1:
                distance = min(distance, end - start + 1)
                frequency[cards[start]] -= 1
                start += 1

            end += 1

        if distance == float('inf'):
            return -1

        return distance
#+end_src


#+begin_example
cards : [3 , 4 , 2 , 3 , 4 , 1]
         3                     :    dist = 1, freq = [0, 0, 0, 1, 0, ...]
         se

         3,  4                 :    dist = 2, freq = [0, 0, 0, 1, 1, ...]
         s   e

         3,  4,  2             :    dist = 3, freq = [0, 0, 1, 1, 1, ...]
         s       e

         3,  4,  2,  3         :    dist = 4, freq = [0, 0, 1, 2, 1, ...]
         s           e

             4,  2,  3         :    dist = 4, freq = [0, 0, 1, 1, 1, ...]
             s       e

             4,  2,  3,  4     :    dist = 4, freq = [0, 0, 1, 1, 2, ...]
             s           e

                 2,  3,  4,  1 :    dist = 4, freq = [0, 1, 1, 1, 1, ...]
                 s           e
#+end_example
