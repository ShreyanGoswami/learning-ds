#+title: 2260 Minimum Consecutive Cards To Pick Up

* Classic Sliding Window


#+begin_src go
func minimumCardPickup(cards []int) int {
    var frequency [1e6+1]int
    distance := math.MaxInt
    start, end := 0, 0

    for end < len(cards) {
        frequency[cards[end]]++
        for frequency[cards[end]] > 1 {
            distance = min(distance, end - start + 1)
            frequency[cards[start]]--
            start++
        }
        end++
    }
    if distance == math.MaxInt {
        return -1
    }
    return distance
}
#+end_src

#+begin_src python
class Solution:
    def minimumCardPickup(self, cards: List[int]) -> int:
        frequency = [0] * (10 ** 6 + 1)
        distance = float('inf')
        start, end = 0, 0

        while end < len(cards):
            frequency[cards[end]] += 1

            while frequency[cards[end]] > 1:
                distance = min(distance, end - start + 1)
                frequency[cards[start]] -= 1
                start += 1

            end += 1

        if distance == float('inf'):
            return -1

        return distance
#+end_src
