#+title: 1047 Remove All Adjacent Duplicates In String
#+link: https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/description/
#+tags: string stack easy

You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.



Example 1:

Input: s = "abbaca"
Output: "ca"
Explanation:
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".

Example 2:
Input: s = "azxxzy"
Output: "ay"

Example 3:
Input: s = "abbbaca"
Output: "abaca"
In case of three adjacent and equal letters, only two will be removed. One of them will remain.

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

* Simple stack

This solution uses a stack and not a monotonic stack. That is why there is no ~while loop~ but there is an ~if else~ check inside the for loop.

#+begin_src go
func removeDuplicates(str string) string {
    s := make([]rune, 0)

    for _, r := range str {
        if len(s) > 0 && s[len(s)-1] == r {
            s = s[:len(s)-1]
        } else {
            s = append(s, rune(r))
        }
    }
    return string(s)
}
#+end_src

#+begin_src python
class Solution:
    def removeDuplicates(self, string: str) -> str:
        s = []

        for r in string:
            if len(s) > 0 and s[-1] == r:
                s.pop()
            else:
                s.append(r)

        return ''.join(s)
#+end_src
