#+title: 1475 Final Prices
#+link: https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/
#+tags: array stack monotonicstack

You are given an integer array prices where prices[i] is the price of the ith item in a shop.

There is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all.

Return an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.



Example 1:

Input: prices = [8,4,6,2,3]
Output: [4,2,4,2,3]
Explanation:
For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.
For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.
For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.
For items 3 and 4 you will not receive any discount at all.
Example 2:

Input: prices = [1,2,3,4,5]
Output: [1,2,3,4,5]
Explanation: In this case, for all items, you will not receive any discount at all.
Example 3:

Input: prices = [10,1,1,6]
Output: [9,0,1,6]


Constraints:

1 <= prices.length <= 500
1 <= prices[i] <= 1000

* Solution

#+begin_src go
func finalPrices(prices []int) []int {
    s := make([]int, 0)

    for i, p := range prices {
        for len(s) > 0 && prices[s[len(s)-1]] >= p {
            prices[s[len(s)-1]] -= p
            s = s[:len(s)-1]
        }
        s = append(s, i)
    }
    return prices
}

func finalPrices2(prices []int) []int {
    s := make([]int, 0, len(prices))

    for i, p := range prices {
        for top := len(s)-1; top >= 0 && prices[s[top]] >= p; top-- {
            prices[s[top]] -= p
            s = s[:top]
        }
        s = append(s, i)
    }
    return prices
}
#+end_src

#+begin_src python
class Solution:
    def finalPrices(self, prices: List[int]) -> List[int]:
        s = []
        for i, p in enumerate(prices):
            while s and prices[s[-1]] >= p:
                j = s.pop()
                prices[j] -= p
            s.append(i)
        return prices
#+end_src

The stack is monotonically increasing.
#+begin_example
prices = [8, 4, 6, 2, 3]

i,p   s              prices[s[-1]]>=p  s       j      prices           s
0,8   []                               []             [8, 4, 6, 2, 3]  [(0,8)]

1,4   [(0,8)]        8 > 4             []      0      [4, 4, 6, 2, 3]  [(1,4)]

2,6   [(1,4)]        4 < 6             [(1,4)]        [4, 4, 6, 2, 3]  [(1,4), (2,6)]

3,2   [(1,4), (2,6)] 6 > 2             [(1,4)] 2      [4, 4, 4, 2, 3]  [(1,4)]
      [(1,4)]        4 > 2             []      1      [4, 2, 4, 2, 3]  [(3,2)]

4,3   [(3,2)]        2 < 3             [(3,2)]        [4, 2, 4, 2, 3]  [(3,2), (4,3)]

#+end_example

