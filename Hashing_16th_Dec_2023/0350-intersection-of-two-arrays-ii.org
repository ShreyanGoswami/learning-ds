#+title: 0350 Intersection Of Two Arrays Ii
#+link: https://leetcode.com/problems/intersection-of-two-arrays-ii/
#+tags: array hashtable twopointers binarysearch sorting

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.

Constraints:
1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

* Frequency Count

#+begin_src go
func intersect(nums1 []int, nums2 []int) []int {
    var freq [1001]int
    out := make([]int, 0)

    for _, v := range nums1 {
        freq[v] += 1
    }

    for _, num := range nums2 {
        if freq[num] > 0 {
            out = append(out, num)
        }
        freq[num]--
    }
    return out
}
func intersect(nums1 []int, nums2 []int) []int {
    freq := make(map[int]int)
    out := make([]int, 0)

    for _, v := range nums1 {
        freq[v] += 1
    }

    for _, num := range nums2 {
        if freq[num] > 0 {
            out = append(out, num)
        }
        freq[num]--
    }
    return out
}
#+end_src

#+begin_src python
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        freq = Counter(nums1)
        intersection = []

        for num in nums2:
            if freq[num] > 0:
                intersection.append(num)
                freq[num] -= 1

        return intersection
#+end_src

Time Complexity: Linear ~O(n + m)~.
Building a counter from nums1 takes ~O(n)~ time, where n is the length of nums1.

Iterating over nums2 and updating the counter takes ~O(m)~ time, where m is the length of nums2.

Hence, the overall time complexity is ~O(n + m)~, where n is the length of nums1 and m is the length of nums2.

Space Complexity: Linear ~O(n)~, n is the number of unique elements of nums1.
The space complexity of the code depends on the space used by the counter data structure.

The counter keeps track of elements from nums1, therefore it uses ~O(n)~ space, where n is the number of unique elements in nums1.

In the worst case, if all elements in nums2 are present in nums1, it can take ~O(min(n, m))~ space, where n is the length of nums1 and m is the length of nums2.

Taking both into account, the space complexity is ~O(n + min(n, m))~ which simplifies to ~O(n)~ as min(n, m) is bounded by n.
Overall, the space complexity of the code is ~O(n)~ where n represents the number of unique elements in nums1.
