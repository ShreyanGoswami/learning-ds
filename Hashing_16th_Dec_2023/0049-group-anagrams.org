#+title: 0049 Group Anagrams
#+link: https://leetcode.com/problems/group-anagrams/
#+tags: array hashtable string sorting

Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:
Input: strs = [""]
Output: [[""]]

Example 3:
Input: strs = ["a"]
Output: [["a"]]

Constraints:
1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

* Hand rolled hash

#+begin_src go
func groupAnagrams(strs []string) [][]string {
    var anagrams [][]string
    groupTable := make(map[int][]string)
    for _, word := range strs {
        hash := getHash(word)
        groupTable[hash] = append(groupTable[hash], word)
    }

    for _, group := range groupTable {
        anagrams = append(anagrams, group)
    }
    return anagrams
}

func getHash(word string) int {
    prod := 1
    sum := 0
    for _, r := range word {
        prod *= int(r)
        sum  += int(r)
    }
    return sum * prod
}
#+end_src

* Hashmap

#+begin_src go
type frequency [26]int
type group []string

func groupAnagrams(strs []string) [][]string {
    var out [][]string
    groupTable := make(map[frequency]group)

    for _, word := range strs {
        signature := getFrequency(word)
        groupTable[signature] = append(groupTable[signature], word)
    }

    for _, g := range groupTable {
        out = append(out, g)
    }
    return out
}
func getFrequency(word string) (f frequency) {
    for _, r := range word {
        f[r-'a'] += 1
    }
    return f
}
#+end_src
