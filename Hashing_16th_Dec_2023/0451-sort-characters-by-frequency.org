#+title: 0451 Sort Characters By Frequency
#+link: https://leetcode.com/problems/sort-characters-by-frequency/
#+tags: hashtable string sorting heap priorityqueue bucketsort counting

Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

Example 1:
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:
Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:
Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.


Constraints:
1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.

* Sol
TC -> O(n) for counting the frequency, O(m * log m) for sorting the counted characters where m is the numebr of unique characters in the string ~s~ and n is length of ~s~.

SC -> O(n), both ~freq~ and ~runes~ are fixed length, ~result~ is same length as ~s~.

#+begin_src go
func frequencySort(s string) string {
    var freq [128]int
    for _, c := range s {
        freq[c]++
    }

	// O(m * log m) SC
    runes := make([]int, len(freq))
    for count := range freq {
        runes = append(runes, count)
    }
    sort.Slice(runes, func(i, j int) bool {
        return freq[runes[i]] > freq[runes[j]]
    })
    var result strings.Builder
	for _, r := range runes {
		result.WriteString(strings.Repeat(string(r), freq[r]))
	}
	return result.String()
}
#+end_src
